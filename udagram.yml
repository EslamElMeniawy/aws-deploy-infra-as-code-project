Description: Infrastructure as Code Project - Udagram

Parameters:
  ProjectName:
    Description: A project name that will be used for tagging resources
    Type: String

  HomeIp:
    Type: String
    Description: Your home IP address for SSH access (CIDR format, e.g., 203.0.113.0/32).

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the key pair for SSH access.

Resources:
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access from home IP
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref HomeIp

  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-04aa00acb1165b32a
      SubnetId:
        Fn::ImportValue: !Sub "${ProjectName}-public-subnet1"
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-bastion-host

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref ProjectName
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-04aa00acb1165b32a
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceType: t2.micro
        UserData:
          Fn::Base64: |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install nginx -y
            sudo service nginx start
            echo "it works! Udagram, Udacity" > /var/www/html/index.html
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: "10"

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${ProjectName}-private-subnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "4"
      DesiredCapacity: "4"
      MaxSize: "6"
      TargetGroupARNs:
        - Ref: TargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${ProjectName}-public-subnet1"
        - Fn::ImportValue: !Sub "${ProjectName}-public-subnet2"
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: "80"
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "TargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-vpc-id"

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-667646505404"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ""
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ProjectName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource:
                  - !GetAtt S3Bucket.Arn

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref IAMRole

Outputs:
  LoadBalancerURL:
    Description: Public URL of the Load Balancer
    Value: !Sub "http://${LoadBalancer.DNSName}"

  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"

  BastionHostPublicIP:
    Description: Public IP address of the Bastion Host
    Value: !GetAtt Bastion.PublicIp
